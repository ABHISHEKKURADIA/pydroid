High priority
=============
- Get pyjnius working
- Remove TODO (dependencies) in status.py
- Set up a virtual machine for virtualbox
- Deploy a sample app on GooglePlay, include it in the tutorial
- Set up a project configuration to include only necessary .so Qt files to
  reduce the memory usage of the uncompressed app.


Medium priority
===============
- report the size after deployment, for example for the complete deployment script
- make tests passing with nosetests
- get meego/QtComponents/Themes compiled
- get meego/QtComponents/Themes available for Ubuntu (also in virtual machine)
- unzip archives during application installation and not during the first start
  (see: https://groups.google.com/forum/?fromgroups=#!topic/android-developers/XE2yhdguA4E)
- specify the project icon
- include third party binaries easily (eq. you give path to so file
  or executable and it gets deployed to files/bin (add it to PATH))
- set what bindings to include (maybe based on android/values/libs.xml - this
  file lists all Qt Libs that would be requested from Ministro & actually used,
  no use to deploy bindings for libs that aren't there)
- let user configure which python standard modules to include in the lib
- check Android integration
  - hardware buttons should probably be accessible through Necessitas Qt libs
  - the are some Python bindings for most of the Android stuff, like showing
    android dialogs, toasts, triggering activities, services, threading,
    sensors, actuators
  - handle intents, such as "open a zip/PDF/JPG" file with a Python application
  - this looks the most promising (it think is was developed by the Kivi
    project): http://pyjnius.readthedocs.org/en/latest/index.html
  - write examples to demonstrate this features


Low priority
============
- Get information about arm versions and deployment for GooglePlay:
  Apps compiled for armv5 should also run on devices with v6 and v7a
- Remove armversion from config file, set armv5 as default because higher arm
  versions are backwards compatible.
- Blog about the project (e.g. planet python)
- Tutorial:
  - add build instructions for Qt Components
- arranging with the Ministro People to carry Python & Qt Components (Minstro
  was initially meant to be a general purpose library distribution tool it is
  just used only for Qt right now)
- the opposite - just bundling everything & disabling Ministro, thus getting a
  really big APK, that on the other hand would not annoy the users with
  Ministro installation
- migrating to Qt 5 once there are some working Python bindings are available
- make the project available for other architectures (BB10, OSX, Windows8, etc)
  without the need of code change
- Write a GUI client or Sublime plugin or QtCreator plugin
- Add the possibility to deploy only a very minimal apk that is an installer.
  The Ã®nstaller then loads the required libraries from some server. this reduces
  the size of the needed memory, since the .apk part is much smaller (save about
  12MB I guess), but the size of the uncompressed data still remains the same.


Things to do before deployment:
===============================
- Remove pathes from deploy.conf, add placeholders instead
- Uncomment line 10 (sys.path.insert...) in bin/pydroid to load system wide pydroid


