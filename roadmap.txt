High priority
=============
- Remove temporary fast_deploy files from sdcard
- Set up a virtual machine for virtualbox
- Prepare a .apk and a sample project for Android 2.3.3 (API level 8 or 9)
- Get information about arm version (armv5, armv6, armv7):
  - backwards compatible?
  - deployment for GooglePlay
  - Tutorial and list of devices/arm-version about configuring a project
- Deploy a sample app on GooglePlay, include it in the tutorial


Medium priority
===============
- get meego/QtComponents/Themes compiled
- get meego/QtComponents/Themes available for Ubuntu (also in virtual machine)
- unzip archives during application installation and not during the first start
- option to generate either a full project with Qt Components or just a QML one
  (without Qt Components & theme)
- specify the project icon
- include third party binaries easily (eq. you give path to so file
  or executable and it gets deployed to files/bin (add it to PATH))
- set what bindings to include (maybe based on android/values/libs.xml - this
  file lists all Qt Libs that would be requested from Ministro & actually used,
  no use to deploy bindings for libs that aren't there)
- let user configure which python standard modules to include in the lib
- check Android integration
  - hardware buttons should probably be accessible through Necessitas Qt libs
  - the are some Python bindings for most of the Android stuff, like showing
    android dialogs, toasts, triggering activities, services, threading,
    sensors, actuators
  - handle intents, such as "open a zip/PDF/JPG" file with a Python application
  - this looks the most promising (it think is was developed by the Kivi
    project): http://pyjnius.readthedocs.org/en/latest/index.html
  - write examples to demonstrate this features


Low priority
============
- Blog about the project (e.g. planet python)
- Check whether archives are removed on android device after unpacking them
  during the first application start
- Tutorial:
  - clarify the architecture differences during build (armv5, armv7a)
  - add build instructions for Qt Components
- arranging with the Ministro People to carry Python & Qt Components (Minstro
  was initially meant to be a general purpose library distribution tool it is
  just used only for Qt right now)
- the opposite - just bundling everything & disabling Ministro, thus getting a
  really big APK, that on the other hand would not annoy the users with
  Ministro installation
- migrating to Qt 5 once there are some working Python bindings are available
- make the project available for other architectures (BB10, OSX, Windows8, etc)
  without the need of code change




